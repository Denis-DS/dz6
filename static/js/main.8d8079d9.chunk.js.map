{"version":3,"sources":["component/Registration/style.module.scss","component/Registration/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","React","memo","useState","name","setName","phone","setPhone","adress","setAdress","isAgreePolicy","setIsAgreePolicy","nameOfRole","setNameOfRole","roles","key","value","isChecked","className","style","Form","onSubmit","elem","preventDefault","alert","action","type","placeholder","required","id","onChange","e","target","classnames","input","Error","map","role","htmlFor","checked","App","Registration","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,KAAO,oBAAoB,MAAQ,qBAAqB,MAAQ,uB,4MC0GnEC,MAAMC,MAvGH,WAChB,IADsB,EAGED,IAAME,SAAS,IAHjB,mBAGfC,EAHe,KAGTC,EAHS,OAIIJ,IAAME,SAAS,IAJnB,mBAIfG,EAJe,KAIRC,EAJQ,OAKMN,IAAME,SAAS,IALrB,mBAKfK,EALe,KAKPC,EALO,OAMoBR,IAAME,UAAS,GANnC,mBAMfO,EANe,KAMAC,EANA,OAOcV,IAAME,SAAS,IAP7B,mBAOfS,EAPe,KAOHC,EAPG,KAShBC,EAAQ,CACZ,CACEC,IAAK,OACLC,MAAO,OACPC,UAA0B,SAAfL,EACXC,iBAEF,CACEE,IAAK,OACLC,MAAO,OACPC,UAA0B,SAAfL,EACXC,iBAEF,CACEE,IAAK,YACLC,MAAO,YACPC,UAA0B,cAAfL,EACXC,kBAaJ,OACE,0BAAMK,UAAWC,IAAMC,KAAMC,SAVV,SAACC,GACpBA,EAAKC,iBACLlB,EAAQ,IACRI,EAAU,IACVF,EAAS,IACTI,GAAiB,GACjBE,EAAc,IACdW,MAAM,wBAG+CC,OAAO,IAC1D,2CACA,2BACEC,KAAK,OACLC,YAAY,OACZC,UAAU,EACVC,GAAG,OACHb,MAAOZ,EACP0B,SAAU,SAAAC,GAAC,OAAI1B,EAAQ0B,EAAEC,OAAOhB,QAChCE,UAAWe,IAAWd,IAAMe,MAAP,eAClBf,IAAMgB,MAjDA,UAiDQ/B,MAGnB,2BACEsB,KAAK,SACLC,YAAY,QACZC,UAAU,EACVC,GAAG,QACHb,MAAOV,EACPwB,SAAU,SAAAC,GAAC,OAAIxB,EAASwB,EAAEC,OAAOhB,QACjCE,UAAWe,IAAWd,IAAMe,MAAO,MAErC,8BACEhB,UAAWe,IAAWd,IAAMe,OAC5BL,GAAG,SACHF,YAAY,SACZC,UAAU,EACVZ,MAAOR,EACPsB,SAAU,SAAAR,GAAI,OAAIb,EAAUa,EAAKU,OAAOhB,UAE1C,6BACGF,EAAMsB,KAAI,SAAAC,GACT,OACE,yBAAKtB,IAAKsB,EAAKtB,KACb,2BAAOuB,QAASD,EAAKtB,KAAMsB,EAAKrB,OAChC,2BACEU,KAAK,QACLV,MAAOqB,EAAKtB,IACZwB,QAASF,EAAKpB,UACda,SAAU,kBAAMO,EAAKxB,cAAcwB,EAAKtB,aAMlD,2BAAOuB,QAAQ,UACb,2BACEC,QAAS7B,EACToB,SAAU,WACRnB,GAAkBD,IAEpBkB,UAAU,EACVF,KAAK,WACLtB,KAAK,SACLyB,GAAG,WATP,yBAaA,4BAAQH,KAAK,UAAb,a,MCvFSc,MAXf,WACE,OACE,yBAAKtB,UAAU,OACb,4BAAQA,UAAU,cAEhB,kBAACuB,EAAD,SCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8d8079d9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"style_Form__3zb8f\",\"input\":\"style_input__2wBhC\",\"Error\":\"style_Error__FAnB4\"};","import React from \"react\";\nimport style from \"./style.module.scss\";\nimport classnames from \"classnames\";\n\nconst OrderForm = () => {\n  const myName = \"Denis\";\n\n  const [name, setName] = React.useState(\"\");\n  const [phone, setPhone] = React.useState(\"\");\n  const [adress, setAdress] = React.useState(\"\");\n  const [isAgreePolicy, setIsAgreePolicy] = React.useState(false);\n  const [nameOfRole, setNameOfRole] = React.useState(\"\");\n\n  const roles = [\n    {\n      key: \"cahs\",\n      value: \"Cahs\",\n      isChecked: nameOfRole === \"cahs\",\n      setNameOfRole\n    },\n    {\n      key: \"card\",\n      value: \"Card\",\n      isChecked: nameOfRole === \"card\",\n      setNameOfRole\n    },\n    {\n      key: \"checkbook\",\n      value: \"Checkbook\",\n      isChecked: nameOfRole === \"checkbook\",\n      setNameOfRole\n    }\n  ];\n\n  const singInSubmit = (elem: React.FormEvent<HTMLFormElement>) => {\n    elem.preventDefault();\n    setName(\"\");\n    setAdress(\"\");\n    setPhone(\"\");\n    setIsAgreePolicy(false);\n    setNameOfRole(\"\");\n    alert(\"Order was confirmed\");\n  };\n  return (\n    <form className={style.Form} onSubmit={singInSubmit} action=\"\">\n      <h1>Order form:</h1>\n      <input\n        type=\"text\"\n        placeholder=\"Name\"\n        required={true}\n        id=\"name\"\n        value={name}\n        onChange={e => setName(e.target.value)}\n        className={classnames(style.input, {\n          [style.Error]: name !== myName\n        })}\n      />\n      <input\n        type=\"number\"\n        placeholder=\"Phone\"\n        required={true}\n        id=\"phone\"\n        value={phone}\n        onChange={e => setPhone(e.target.value)}\n        className={classnames(style.input, {})}\n      />\n      <textarea\n        className={classnames(style.input)}\n        id=\"adress\"\n        placeholder=\"Adress\"\n        required={true}\n        value={adress}\n        onChange={elem => setAdress(elem.target.value)}\n      ></textarea>\n      <div>\n        {roles.map(role => {\n          return (\n            <div key={role.key}>\n              <label htmlFor={role.key}>{role.value}</label>\n              <input\n                type=\"radio\"\n                value={role.key}\n                checked={role.isChecked}\n                onChange={() => role.setNameOfRole(role.key)}\n              />\n            </div>\n          );\n        })}\n      </div>\n      <label htmlFor=\"policy\">\n        <input\n          checked={isAgreePolicy}\n          onChange={() => {\n            setIsAgreePolicy(!isAgreePolicy);\n          }}\n          required={true}\n          type=\"checkbox\"\n          name=\"policy\"\n          id=\"policy\"\n        />\n        Agree with the policy\n      </label>\n      <button type=\"submit\">Order</button>\n    </form>\n  );\n};\n\nexport default React.memo(OrderForm);\n","import React from \"react\";\nimport Registration from \"./component/Registration\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <Form /> */}\n        <Registration />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}